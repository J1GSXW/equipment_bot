from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
import gspread
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import date
import os
from aiogram import executor
import sqlite3 as sq
from urllib.parse import quote

API_TOKEN = '6593390936:AAFvqgeBd3WndujrT55P4pSIK79T4otbXss'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


def get_current_row():
    current_list = worksheet.col_values(1)
    current_list.append(' ')
    count = 0
    for item in current_list:
        count += 1
        if item == " ":
            break
    return count


def last_index_of_element(lst, target):
    last_index = None
    for i in range(len(lst)):
        if lst[i] == target:
            last_index = i
    return last_index


gc = gspread.service_account(filename='bd-equipment-fd140c172d25.json')
table = gc.open_by_key('1maXmL6TizRyoPDhlmCv19M0T776eHG6VJ9Zbx-KZ3mU')
worksheet = table.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
equipment_list = table.worksheet("–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
helper_list = table.worksheet('Helper')


def db_get_user_login_turple():
    with sq.connect("equipment_bd.db") as con:
        cur = con.cursor()
        user_login_res = cur.execute("SELECT login, password FROM users")
        user_login_password = user_login_res.fetchall()
    cur.close()
    return user_login_password


def db_get_user_logins(param: bool):
    with sq.connect("equipment_bd.db") as con:
        cur = con.cursor()
        user_login_res = cur.execute("SELECT login, password FROM users")
        user_login_password = user_login_res.fetchall()
        users_list = []
        if param is True:
            for users in user_login_password:
                users_list.append(users[0])
            cur.close()
            return users_list
        else:
            for users in user_login_password:
                users_list.append(users[1])
            return users_list


def db_get_user_password_str(user):
    with sq.connect("equipment_bd.db") as con:
        cur = con.cursor()
        user_login_res = cur.execute("SELECT login, password FROM users")
        user_login_password = user_login_res.fetchall()
        for users in user_login_password:
            if users[0] == user:
                cur.close()
                return users[1]


def db_add_user(username, password):
    with sq.connect("equipment_bd.db") as con3:
        cur3 = con3.cursor()
        sq_insert_with_param = """INSERT INTO users (login, password) VALUES (?, ?);"""
        data_turple = (username, password)
        cur3.execute(sq_insert_with_param, data_turple)


def db_delete_user(username):
    with sq.connect("equipment_bd.db") as con4:
        cur4 = con4.cursor()
        sq_insert_with_param = """DELETE from users where login = ?"""
        cur4.execute(sq_insert_with_param, (username,))
        cur4.close()


def get_last_processed_row(filename):
    if os.path.exists(filename):
        with open(filename, "r") as file:
            return int(file.read())
    return 1  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏


def update_last_processed_row(row, filename):
    with open(filename, "w") as file:
        file.write(str(row))


LAST_PROCESSED_ROW_FILE = "last_row.txt"
last_row_list = 'last_row_equipment.txt'

global current_equipment


def get_last_row_from_table():
    current_data = equipment_list.col_values(2)
    count = 1
    for i in current_data:
        count += 1
    return count


@dp.message_handler(commands=['see_users'], state='*')
async def see_users_command_handler(message: types.Message, state=FSMContext):
    try:
        async with state.proxy() as data:
            user = data['authorized_user']
            if user in db_get_user_logins(True):
                users_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                user_login_password1 = db_get_user_login_turple()
                for username, password in user_login_password1:
                    users_text += f"–õ–æ–≥–∏–Ω: {username}, –ü–∞—Ä–æ–ª—å: {password}\n"
                await message.reply(users_text)
            else:
                await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")


@dp.message_handler(commands=['users'], state='*')
async def users_command_handler(message: types.Message, state: FSMContext):
    try:
        user_actions_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                    KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                ],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
            ],
            resize_keyboard=True,
        )
        async with state.proxy() as data:
            user = data['authorized_user']
            if user in db_get_user_logins(True):
                await message.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_actions_keyboard)
                await state.set_state("user_action")
            else:
                await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")


@dp.message_handler(state="user_action")
async def user_action_handler(message: types.Message, state: FSMContext):
    action = message.text
    if action == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await message.reply("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state("add_username")
    elif action == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await message.reply("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state("delete_username")
    elif action == "–û—Ç–º–µ–Ω–∞":
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.reset_state(with_data=False)
    else:
        await message.reply(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n2. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            "\n3. –û—Ç–º–µ–Ω–∞")


@dp.message_handler(state="add_username")
async def add_username_handler(message: types.Message, state: FSMContext):
    username = message.text
    if username == "–û—Ç–º–µ–Ω–∞":
        await state.reset_state(with_data=False)
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await state.update_data(username=username)
        await message.reply("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state("add_password")


@dp.message_handler(state="add_password")
async def add_password_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    password = message.text
    if password == "–û—Ç–º–µ–Ω–∞":
        await state.reset_state(with_data=False)
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        if username and password:
            db_add_user(username, password)

            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.reset_state(with_data=False)


@dp.message_handler(state="delete_username")
async def delete_username_handler(message: types.Message, state: FSMContext):
    username = message.text
    if username in db_get_user_logins(True):
        db_delete_user(username)
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.reset_state(with_data=False)


@dp.message_handler(commands=['auth'])
async def auth(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        authorized_user = data.get('authorized_user')
        if authorized_user:
            await message.reply("–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥—Ä—É–≥, –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!üëç")
        else:
            await state.set_state("login")
            await message.reply("–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")


@dp.message_handler(state="login")
async def login_handler(message: types.Message, state: FSMContext):
    global authtorizer_user_find
    login = message.text.strip()
    if login in db_get_user_logins(True):
        async with state.proxy() as data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data['login'] = login
            data['auth'] = login
            authtorizer_user_find = data['login']
        await state.set_state("password")
        await message.reply("–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


@dp.message_handler(state="password")
async def password_handler(message: types.Message, state: FSMContext):
    password = message.text.strip()
    async with state.proxy() as data:
        login = data.get('login')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = str(db_get_user_password_str(login))
        if login and password == user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            data['authorized_user'] = login
            await state.reset_state(with_data=False)
            await message.reply(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {login}!")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –¥—Ä—É–≥.")


@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        authorized_user = data.get('authorized_user')
        if authorized_user:
            await state.update_data(authorized_user=authorized_user)
            command = message.get_args()  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã
            equipments = equipment_list.col_values(5)
            del equipments[0]

            global current_equipment
            for equipment in equipments:
                # –î–∞–ª–µ–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è), –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                if command:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º quote –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    if command == quote(equipment):
                        global current_equipment
                        current_equipment = equipment
                        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                        keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
                        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {equipment}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?",
                                            reply_markup=keyboard)
                        break
                else:
                    await message.reply(
                        "–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ QR –∫–æ–¥ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –≤–Ω–µ—Å—Ç–∏ "
                        "–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Ç–∞–±–ª–∏—Ü–µ–π")
                    break
        else:
            await message.reply("–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /auth")


@dp.message_handler(commands='add_equipment')
async def add_equipment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_equipment_list = helper_list.col_values(3)
        del current_equipment_list[0]
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for i in current_equipment_list:
            keyboard.add(i)
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞: ", reply_markup=keyboard)
        await state.set_state("equipment_name")


@dp.message_handler(state="equipment_name")
async def equipment_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_equipment_list = helper_list.col_values(3)
        del current_equipment_list[0]
        name = message.text
        if name in current_equipment_list:
            data['equipment_name'] = name
            await message.reply("–í–≤–µ–¥–∏ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ")
            await state.set_state("model")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É")


@dp.message_handler(state='model')
async def model_change(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        model = message.text
        data['model'] = model
        await message.answer("–í–≤–µ–¥–∏ SN –∑–∞–≤–æ–¥—Å–∫–æ–π: ")
        await state.set_state("SN_output")


@dp.message_handler(state="SN_output")
async def sn_output_change(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        sn_output = message.text
        data['sn_output'] = sn_output
        await message.answer("–í–≤–µ–¥–∏ SN –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π")
        await state.set_state('SN_input')


@dp.message_handler(state="SN_input")
async def sn_input_change(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        today = date.today()
        timestamp = today.strftime("%m/%d/%Y")

        data['timestamp'] = timestamp
        sn_input = message.text
        data['sn_input'] = sn_input
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
        await state.set_state('exp_date')


@dp.message_handler(state="exp_date")
async def exp_date_change(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        exp_date = message.text
        data['exp_date'] = exp_date
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add("–î–∞–ª–µ–µ")
        await message.answer("–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–∞–ª–µ–µ)", reply_markup=keyboard)
        await state.set_state('comment')


@dp.message_handler(state="comment")
async def comment_change(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        comment = message.text
        if comment != "–î–∞–ª–µ–µ":
            data['comment'] = comment
        name = data.get('equipment_name')
        model = data.get('model')
        sn_output = data.get('sn_output')
        sn_input = data.get('sn_input')
        timestamp = data.get('timestamp')
        exp_date = data.get('exp_date')
        comment = data.get('comment')

        last_row = get_last_row_from_table()

        await message.answer("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏")
        equipment_list.update(f"B{last_row}", name)
        equipment_list.update(f"C{last_row}", model)
        equipment_list.update(f'D{last_row}', sn_output)
        equipment_list.update(f'E{last_row}', sn_input)
        equipment_list.update(f'F{last_row}', timestamp)
        equipment_list.update(f'G{last_row}', exp_date)
        equipment_list.update(f"H{last_row}", comment)
        await state.reset_state(with_data=False)
        await message.answer("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")


@dp.message_handler(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def history_command_handler(message: types.Message, state: FSMContext):
    try:
        global current_equipment
        history = worksheet.get_all_values()
        del history[0]

        max_message_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        response = f"–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é:\n"
        message_parts = []

        for item in history:
            if item[0] == current_equipment:
                event_info = (f"–°–æ–±—ã—Ç–∏–µ (—Ä–µ–º–æ–Ω—Ç, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ) - {item[1]}\n"
                              f"–î–∞—Ç–∞ - {item[2]}\n"
                              f"–ö—Ç–æ –¥–µ–ª–∞–ª - {item[3]}\n"
                              f"–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ - {item[4]}\n"
                              f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å - {item[5]}\n\n")

                if len(response + event_info) > max_message_length:
                    message_parts.append(response)
                    response = f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π:\n"
                response += event_info

        message_parts.append(response)
        for part in message_parts:
            await message.answer(part)
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥")


@dp.message_handler(text="–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def change_command_handler(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            authorized_user = data.get('authorized_user')
            global current_equipment
            if authorized_user and current_equipment is not None:
                await state.update_data(authorized_user=authorized_user)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:")
                await state.set_state("change_timestamp")
            else:
                await message.reply("–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /auth")
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥")


@dp.message_handler(state="change_timestamp")
async def change_timestamp_handler(message: types.Message, state: FSMContext):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await state.reset_state(with_data=False)
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –¥—Ä—É–≥–æ–π QR-–∫–æ–¥",
                                reply_markup=keyboard)
        else:
            async with state.proxy() as data:
                action = message.text
                data['action'] = action
                data['current_equipment'] = current_equipment
                today = date.today()
                timestamp = today.strftime("%m/%d/%Y")

                data['timestamp'] = timestamp
                user = data.get('authorized_user')
                data['who_do'] = user
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(KeyboardButton("–°–∫–ª–∞–¥"), KeyboardButton("–û—Ñ–∏—Å"), KeyboardButton("–õ–µ–Ω–∏–Ω–∞"),
                         KeyboardButton("–û–Ω–∏–∫—Å"), KeyboardButton("–ë–∏–ª–∞–π–Ω"), KeyboardButton("–§–∞–∫–µ–ª"),
                         KeyboardButton("–ö–∞—Ä—É—Å–µ–ª—å"),
                         KeyboardButton("–°–∞–º–±–µ—Ä–∏"), KeyboardButton("–†–∞–¥—É–≥–∞"), KeyboardButton("–î–∏–∫–æ–ø–æ–ª—å—Ü–µ–≤–∞"),
                         KeyboardButton("–ê–≤—Ä–æ—Ä–∞"), KeyboardButton("–î—Ä–∞–º"), KeyboardButton("–ö–∏—Ä–æ–≤–∞"))
            keyboard.insert(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
            await message.reply("–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", reply_markup=keyboard)
            await state.set_state("status")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–∫–∞–Ω–∏—É–π QR-–∫–æ–¥")


@dp.message_handler(state="status")
async def current_status(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.reset_state(with_data=False)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –¥—Ä—É–≥–æ–π QR-–∫–æ–¥",
                            reply_markup=keyboard)
    else:
        async with state.proxy() as data:
            place = message.text
            data['place'] = place
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("–≤ —Ä–∞–±–æ—Ç–µ"), KeyboardButton("–≤ —Ä–µ–º–æ–Ω—Ç–µ"), KeyboardButton("–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"),
                     KeyboardButton("–Ω–æ–≤–æ–µ"), KeyboardButton("—Å–ø–∏—Å–∞–Ω–æ"), KeyboardButton("—É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"))
        keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        await message.reply("–í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ", reply_markup=keyboard)
        await state.set_state("end_change")


@dp.message_handler(state="end_change")
async def end_change_handler(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.reset_state(with_data=False)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –¥—Ä—É–≥–æ–π QR-–∫–æ–¥",
                            reply_markup=keyboard)
    else:
        async with state.proxy() as data:
            last_row = get_current_row()
            data['status'] = message.text
            equipment = data.get('current_equipment')
            action = data.get('action')
            timestamp = data.get('timestamp')
            who_do = data.get('who_do')
            place = data.get('place')
            status = data.get('status')
            await message.reply("–û–¥–Ω—É –º–∏–Ω—É—Ç—É, –¥–∞–Ω–Ω—ã–µ –≤–Ω–æ—Å—è—Ç—Å—è")
            # current_list = worksheet.col_values(1)
            # count = last_index_of_element(current_list, equipment)
            # count += 1
            # print(count)
            # for item in current_list:
            #     if item == equipment:
            #         new_row_values = [equipment, action, timestamp, who_do, place, status]
            #         worksheet.insert_row(new_row_values, index=count+1)
            #         break

            worksheet.update(f"A{last_row}", equipment)
            worksheet.update(f"B{last_row}", action)
            worksheet.update(f"C{last_row}", timestamp)
            worksheet.update(f"D{last_row}", who_do)
            worksheet.update(f"E{last_row}", place)
            worksheet.update(f"F{last_row}", status)
            await state.reset_state(with_data=False)
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
            await message.answer("–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –¥—Ä—É–≥–æ–π QR-–∫–æ–¥",
                                 reply_markup=keyboard)


@dp.message_handler(commands='find_by_name')
async def find_equipment_by_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        authorized_user = data.get('authorized_user')
    if authorized_user:
        await message.answer("–í–≤–µ–¥–∏ SN –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π: ")
        await state.set_state("find_sn")
    else:
        await message.answer("–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /auth")


@dp.message_handler(state='find_sn')
async def find_sn(message: types.Message, state: FSMContext):
    equipment = table.worksheet("–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    current_data = equipment.col_values(5)
    del current_data[0]
    current_sn = message.text
    for item in current_data:
        if item == current_sn:
            await state.reset_state(with_data=False)
            global current_equipment
            current_equipment = item
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
            await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {item}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?",
                                reply_markup=keyboard)


@dp.message_handler(commands='send_db')
async def send_db(message: types.Message):
    with open('equipment_bd.db', 'rb') as f:
        await message.answer_document(types.InputFile(f, filename='equipment_bd.db'), caption="–í–æ—Ç —Ç–µ–±–µ –±–¥")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
